group 'cc.vileda.kalfor'
version '3.1.2'

buildscript {
    ext.kotlinVersion = '1.1.2-3'
    ext.extraConfVersion = '2.2.+'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$extraConfVersion"
    }
}

allprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    ext {
        appVersion = '3.1.2'
        appGroup = 'cc.vileda.kalfor'


        junitVersion = '4.12'
    }
}

subprojects {
    group 'cc.vileda.kalfor'
    version '3.1.2'

    def pomOnlyProject = project.name == "kalfor"

    apply plugin: 'optional-base'
    apply plugin: 'provided-base'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'jacoco'

    test.useJUnit()

    compileJava {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

        testCompile "junit:junit:${junitVersion}"
        testCompile "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
    }

    if (pomOnlyProject) {
        artifacts {}
    } else {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives jar
            archives javadocJar
            archives sourcesJar
        }
        signing {
            required { gradle.taskGraph.hasTask(tasks.uploadArchives) }
            sign configurations.archives
        }

        task releaseSub {
            dependsOn signArchives
        }
    }

    if(project.hasProperty('sonatypeUsername')) {
        uploadArchives {

            if (!pomOnlyProject) {
                dependsOn releaseSub
            }

            repositories.mavenDeployer {
                if (!pomOnlyProject) {
                    configuration = configurations.archives
                }

                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }


                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: project.getProperty('sonatypeUsername').toString(), password: project.getProperty('sonatypePassword').toString())
                }

                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: project.getProperty('sonatypeUsername').toString(), password: project.getProperty('sonatypePassword').toString())
                }

                pom.whenConfigured { configgedPom ->
                    configgedPom.dependencies.removeAll { dep ->
                        dep.scope == "test"
                    }

                    configgedPom.dependencies = configgedPom.dependencies.sort { dep ->
                        "$dep.scope:$dep.groupId:$dep.artifactId"
                    }

                    configgedPom.project {
                        name project.name
                        packaging(pomOnlyProject ? 'pom' : 'jar')
                        description project.description
                        url 'https://github.com/vileda/kalfor'
                        inceptionYear '2016'

                        scm {
                            url 'https://github.com/vileda/kalfor'
                            connection 'scm:git:git@github.com:vileda/kalfor.git'
                        }

                        licenses {
                            license {
                                name 'Apache-2.0 License'
                                url 'http://www.apache.org/licenses/LICENSE-2.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'vileda'
                                name 'Tristan Leo'
                                email 'vileda+kalfor@vileda.cc'
                                url 'https://github.com/vileda/kalfor'
                            }
                        }

                        issueManagement {
                            system = "GitHub"
                            url = "https://github.com/vileda/kalfor/issues"
                        }
                    }
                }

            }
        }
    } else {
        uploadArchives { repositories { mavenDeployer {} } }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

gradle.taskGraph.whenReady { taskGraph ->
    allprojects*.version = appVersion
    allprojects*.group = appGroup
}

task jars() {
    dependsOn subprojects.findAll { it.name != 'kalfor' }.jar
    dependsOn subprojects.findAll { it.name != 'kalfor' }.sourcesJar
    dependsOn subprojects.findAll { it.name != 'kalfor' }.javadocJar
}

task release() {
    dependsOn subprojects.uploadArchives
}

defaultTasks 'clean', 'jars'
